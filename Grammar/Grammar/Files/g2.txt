program program_block declarations statements statement_block declaration list_declaration type variable value assign_statement list_assign_statement i_statement o_statement min_max_statement if_else_statement while_statement expression arithmetic_operators min_max logical_expression else_statement logical_operators min_max_content enriched_symbol variable_with_assign min_max_multiple_content expression_value variable_continuation
EPSILON EQUAL IDENTIFIER CONSTANT return list int bool string input print min max if else while { } ( ) [ ] , ; + - * / % < > <= >= == !=
enriched_symbol
enriched_symbol = program
program = program_block program | EPSILON
program_block = declarations | statements
declarations = declaration | list_declaration
declaration = type variable
list_declaration = list type [ CONSTANT ] IDENTIFIER ;
variable = IDENTIFIER variable_with_assign
variable_with_assign = EQUAL value variable_continuation | variable_continuation
variable_continuation = ; | , variable
type = int | bool | string
value = CONSTANT | IDENTIFIER
statements = statement_block statements | EPSILON
statement_block = assign_statement | list_assign_statement | i_statement | o_statement | min_max_statement | if_else_statement | while_statement | return ; | EPSILON
assign_statement = IDENTIFIER EQUAL expression ;
list_assign_statement = IDENTIFIER [ CONSTANT ] EQUAL expression ;
expression = expression_value | expression arithmetic_operators expression_value
expression_value = ( expression ) | IDENTIFIER | CONSTANT
arithmetic_operators = + | - | * | / | %
i_statement = input ( IDENTIFIER ) ;
o_statement = print ( value ) ;
min_max_statement = min_max ( min_max_content ) ;
min_max_content = value min_max_multiple_content
min_max_multiple_content = EPSILON | , value min_max_multiple_content
min_max = min | max
if_else_statement = if ( logical_expression ) { statement_block } else_statement
else_statement = else { statement_block } | EPSILON
logical_expression = value logical_operators value
logical_operators = < | > | <= | >= | == | !=
while_statement = while ( logical_expression ) { statement_block }